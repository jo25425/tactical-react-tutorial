// Have some data
var data = [
    { id: 1, author: "Pete Hunt", text: "This is one comment." },
    { id: 2, author: "Jordan Walke", text: "This is *another* comment." }
];

// Build some React classes
var Comment = React.createClass({
    rawMarkup: function() {
        var rawMarkup = marked(this.props.children.toString(), { sanitize: true });
        return { __html: rawMarkup };
    },
    render: function() {
        return (
            <div data-commentid={this.props.id} className="comment">
                <div className="commentAuthor">
                    {this.props.author}
                </div>
                <div className="commentText" dangerouslySetInnerHTML={this.rawMarkup()} />
                <button onClick={this.props.handleDelete}>X</button>
            </div>
        );
    }
});
var CommentList = React.createClass({
    render: function() {
        var onCommentDelete = this.props.onCommentDelete;
        var commentNodes = this.props.data.map(function(comment) {
            return (
                <Comment
                    author={comment.author}
                    key={comment.id}
                    id={comment.id}
                    handleDelete={onCommentDelete}>
                    {comment.text}
                </Comment>
            );
        });
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
});
var CommentForm = React.createClass({
    getInitialState: function() {
        return { author: '', text: '' };
    },
    handleAuthorChange: function(e) {
        this.setState({ author: e.target.value.trim() });
    },
    handleTextChange: function(e) {
        this.setState({ text: e.target.value.trim() });
    },
    handleSubmit: function(e) {
        e.preventDefault();
        if (!this.state.text || !this.state.author) {
            return;
        }

        // Post new data to server through parent callback
        this.props.onCommentSubmit(this.state);

        // Clear the form
        this.setState(this.getInitialState());
    },
    render: function() {
        return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
                <input
                    type="text"
                    placeholder="My name"
                    size="20"
                    max-length="20"
                    value={this.state.author}
                    onChange={this.handleAuthorChange}
                />
                <input
                    type="text"
                    placeholder="Something fascinating..."
                    size="60"
                    max-length="60"
                    value={this.state.text}
                    onChange={this.handleTextChange}
                />
                <input type="submit" value="Post" />
            </form>
        );
    }
});
var CommentBox = React.createClass({
    loadCommentsFromServer: function() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
                this.setState({ data: data });
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleCommentDelete: function(e) {
        var updatedComments = this.state.data;
        var commentId = e.target.parentNode.getAttribute('data-commentid');
        var commentIndex = updatedComments.findIndex(c => c.id == commentId);
        updatedComments.splice(commentIndex, 1);
        this.setState({ data: updatedComments });

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'DELETE',
            data: { id: commentId },
            success: function(data) {
                this.setState({ data: data });
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });

    },
    handleCommentSubmit: function(comment) {
        var updatedComments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        updatedComments = updatedComments.concat([ comment ]);
        this.setState({ data: updatedComments });

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                this.setState({ data: data });
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function() {
        return { data: [] };
    },
    componentDidMount: function() {
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function() {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data} onCommentDelete={this.handleCommentDelete} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
        );
    }
});

// Create the CommentBox!
ReactDOM.render(
    <CommentBox url="/api/comments" pollInterval={2000} />,
    document.getElementById('content')
);
